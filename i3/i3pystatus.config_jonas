#!/usr/bin/python3
from i3pystatus import Status

status = Status(standalone=True)

# color_focused     = "#729fcf"
color_dark          = "#9090aa"
# color_background  = "#555753"
# color_urgenty     = "#ef2929"
color_bright        = "#eeeeef"


# Displays clock like this:
# Tue 30 Jul 11:59:46 PM KW31
#                          ^-- calendar week
status.register("clock",
    format="%a %-d %b %X",)


# Screen brightnes 
#status.register("backlight",
#	format="BRIGHTNESS {brightness}",
#	)

# Shows the average load of the last minute and the last 5 minutes
# (the default value for format is used)
status.register("load")

# Shows your CPU temperature, if you have a Intel CPU
#status.register("temp",
 #   format="{temp:.0f}°C",)
#status.register("shell",
#	command="sensors coretemp-isa-0000 | grep -P -o  \"[0-9]+\.[0-9]°C\" | head -n1 ",)

# Shows unread telegram messages.
#status.register("shell",
#	        command="telegram-unread",)

# Shows the keyboard lazyout
status.register("shell",
	        command="setxkbmap -query | grep layout  | cut -c 13-",)


# The battery monitor has many formatting options, see README for details

# This would look like this, when discharging (or charging)
# ↓14.22W 56.15% [77.81%] 2h:41m
# And like this if full:
# =14.22W 100.0% [91.21%]
#
# This would also display a desktop notification (via D-Bus) if the percentage
# goes below 5 percent while discharging. The block will also color RED.
# If you don't have a desktop notification demon yet, take a look at dunst:
#   http://www.knopwob.org/dunst/
#status.register("battery",
#    format="{status}/{consumption:.2f}W {percentage:.2f}% [{percentage_design:.2f}%] {remaining:%E%hh:%Mm}",
#    alert=True,
#    alert_percentage=5,
#    status={
#        "DIS": "↓",
#        "CHR": "↑",
#        "FULL": "=",
#    },)

# This would look like this:
# Discharging 6h:51m
status.register("battery",
    format="{consumption:.1f}W {status} {remaining:%E%hh:%Mm}",
    alert=True,
    alert_percentage=5,
    full_color=color_dark,
    charging_color=color_bright,
    critical_color=color_bright,
    status={
        "DIS":  "BAT Discharging",
        "CHR":  "BAT Charging",
        "FULL": "BAT full",
    },)

#status.register("backlight")


# Displays whether a DHCP client is running
# status.register("runwatch",
#     name="DHCP",
#     path="/var/run/dhclient*.pid",)

# Shows the address and up/down state of eth0. If it is up the address is shown in
# green (the default value of color_up) and the CIDR-address is shown
# (i.e. 10.10.10.42/24).
# If it's down just the interface name (eth0) will be displayed in red
# (defaults of format_down and color_down)
#
# Note: the network module requires PyPI package netifaces
status.register("network",
    interface="eno1",
    format_up="{v4cidr}",
    format_down="eno1 unplugged",
    color_up=color_bright,
    color_down=color_dark            
)

status.register("network",
    format_up="{network_graph}",
    interface="wlp2s0",
    start_color=color_dark,
    end_color=color_bright,            
)

# Note: requires both netifaces and basiciw (for essid and quality)
status.register("network",
    interface="wlp2s0",
    format_up="{essid} {quality:03.0f}%",
    format_down="",
    color_up=color_bright,
    color_down=color_dark            
)

status.register("network",
                interface="wlp2s0",
                format_up="wlp2s0: {v4cidr}",
                format_down="wlp2s0 unconnected",
                color_up=color_bright,
                color_down=color_dark

)


# Shows disk usage of /
# Format:
# 42/128G [86G]
#status.register("disk",
#    path="/",
#    format="{used}/{total}G [{avail}G]",
#)

# Shows pulseaudio default sink volume
#
# Note: requires libpulseaudio from PyPI
status.register("pulseaudio",
format="VOL {volume}",
color_muted=color_dark)
# enabled on default
#    on_leftclick="pavucontrol",
#    on_upscroll="amixer -D pulse sset Master 3%+",
#    on_downscroll="amixer -D pulse sset Master 3%-",)

# Shows mpd status
# Format:
# Cloud connected▶Reroute to Remain
status.register("mpd",
                host="localhost",
                port="6600",
                format="{status} {artist} on {album} with {title}",
                status={
                    "pause": "▷",
                    "play": "▶",
                    "stop": "◾",
                },)

status.run()
